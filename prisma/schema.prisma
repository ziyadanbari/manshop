// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String     @unique
    username      String     @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    purchases     Purchase[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id             Int            @id @default(autoincrement())
    name           String
    description    String?
    price          Decimal        @db.Decimal(10, 2)
    originalPrice  Decimal        @db.Decimal(10, 2)
    images         String[]
    category       String
    gender         String
    sizes          String[] // Array of size strings
    colors         String[] // Array of color strings
    rating         Decimal        @db.Decimal(3, 2)
    reviews        Int
    inStock        Boolean        @default(true)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    productReviews Review[]
    purchaseItems  PurchaseItem[]
    Purchase       Purchase[]

    @@map("products")
}

model Purchase {
    id              String   @id @default(cuid())
    userId          String
    total           Decimal  @db.Decimal(10, 2)
    shippingMethod  String
    paymentIntentId String
    status          String   @default("pending") // pending, completed, cancelled
    shippingAddress Json // Store shipping address as JSON
    billingAddress  Json // Store billing address as JSON
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     PurchaseItem[]
    Product   Product?       @relation(fields: [productId], references: [id])
    productId Int?

    @@map("purchases")
}

model PurchaseItem {
    id         String   @id @default(cuid())
    purchaseId String
    productId  Int
    name       String
    price      Decimal  @db.Decimal(10, 2)
    size       String
    color      String
    quantity   Int
    createdAt  DateTime @default(now())

    purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
    product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("purchase_items")
}

model Review {
    id        String   @id @default(cuid())
    userId    String
    productId Int
    rating    Int // 1-5 stars
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("reviews")
}
